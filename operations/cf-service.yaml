AWSTemplateFormatVersion: "2010-09-09"

Resources:

  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
                Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !ImportValue burninator-logs:WriteLogsPolicyArn
        - !ImportValue burninator-config:DecryptSecretsPolicyArn
        - !ImportValue burninator-data:PutToBackupStorePolicyArn

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      Family: !Sub ${AWS::StackName}-BurninatorServiceTask
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      ContainerDefinitions:
        - Name: ServiceTask
          PortMappings:
            - ContainerPort: 3011
              HostPort: 0
          ExtraHosts:
            - Hostname: jira.cnvrmedia.net
              IpAddress: 10.110.192.10
          Image: !ImportValue burninator-repository:RuntimeRepository
          Memory: 32768
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue burninator-logs:LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            - SourceVolume: EFS
              ContainerPath: /app/data
              ReadOnly: false
      Volumes:
        - Name: EFS
          Host:
            SourcePath: /home/ec2-user/efs-mount-point/burninator

  BackupTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      Family: !Sub ${AWS::StackName}-BurninatorBackupTask
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      ContainerDefinitions:
        - Name: BackupTask
          Image: !ImportValue burninator-repository:RuntimeRepository
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue burninator-logs:LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            - SourceVolume: EFS
              ContainerPath: /app/data
              ReadOnly: false
          Environment:
            - Name: BACKUP_BUCKET
              Value: !ImportValue burninator-data:BackupStore
          Command:
            - ./scripts/backupaws.sh
      Volumes:
        - Name: EFS
          Host:
            SourcePath: /home/ec2-user/efs-mount-point/burninator

  BurninatorService:
    Type: AWS::ECS::Service
    DependsOn:
      - HTTPListener
      - HTTPSListener
    Properties:
      Cluster: !ImportValue burninator-compute:Cluster
      DesiredCount: 1
      TaskDefinition: !Ref Task
      LoadBalancers:
        - ContainerName: ServiceTask
          ContainerPort: 3011
          TargetGroupArn: !Ref HTTPTarget

  RunTaskPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:RunTask
                  Resource:
                    - !Ref BackupTask
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource:
                    - "*"

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref RunTaskPolicy

  Backup:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(6 hours)
      State: ENABLED
      Targets:
        - Id: backup-burninator-data-task
          RoleArn: !GetAtt SchedulerRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref BackupTask
            TaskCount: 1
          Arn: !ImportValue burninator-compute:ClusterArn


  HTTPTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 125
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue network-AttachedNetwork
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HTTPTarget
          Type: forward
      LoadBalancerArn: !ImportValue burninator-compute:LoadBalancerArn
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HTTPTarget
          Type: forward
      LoadBalancerArn: !ImportValue burninator-compute:LoadBalancerArn
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-west-1:123972995618:certificate/103047ed-5260-4791-942a-c0128cbb4d65


Outputs:
  Service:
    Value: !GetAtt BurninatorService.Name
    Export:
      Name: !Sub ${AWS::StackName}:Service
  ServiceArn:
    Value: !Ref BurninatorService
    Export:
      Name: !Sub ${AWS::StackName}:ServiceArn
